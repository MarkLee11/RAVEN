RAVEN项目 - BARS功能架构文档
======================================

## 概述
BARS功能是RAVEN Berlin夜生活发现应用的核心模块之一，与CLUBS功能并行，为用户提供柏林酒吧的发现、评价和互动功能。

## 核心功能
1. 酒吧浏览和搜索
2. 多维度过滤系统 (地区、饮品类型、风格、氛围等)
3. 用户评价和评分系统 (质量、价格、氛围、友善度)
4. 酒吧详情展示
5. 收藏功能
6. 评论分页展示

## 数据库架构

### 主要表结构：
- bars (主表): 存储酒吧基本信息
- bar_ratings: 默认评分 (当没有用户评分时使用)
- bar_reviews: 用户评论和评分
- bar_themes: 酒吧与主题的关联表
- bar_locations: 酒吧地址信息
- districts: 地区信息 (与clubs共享)
- themes: 主题标签系统 (扩展支持bars分类)

### 评分系统：
- 数据库存储: 0-100整数评分
- 评分维度: quality_rating, price_rating, vibe_rating, friendliness_rating
- 计算逻辑: 用户评分平均值优先，fallback到默认评分

### 主题分类系统：
- drinks: cocktails, beer, wine, whisky, gin, vodka, tequila, rum, shots, mocktails
- style: upscale, classic, historic, industrial, minimalist, alternative, speakeasy, art-bar
- architecture: outdoor, rooftop, stage, smoking-area, private-rooms
- vibe: straight-bar, gay-bar, lesbian-bar, queer-bar, lgbtq-friendly, chill, classy, lively, crowded, cozy, romantic, wild, underground, artsy, intimate, touristy, local
- music: jazz, blues, funk, soul, disco, pop, indie, rock, electronic, latin, live-music

## 文件架构和交互

### 1. 数据层 (Data Layer)
```
sql/
├── bars_v2_00_create_all_bar_tables.sql  [一键创建所有表]
├── bars_v2_01_create_bars_table.sql      [bars主表]
├── bars_v2_02_create_bar_ratings_table.sql [默认评分表]
├── bars_v2_03_create_bar_reviews_table.sql [用户评论表]
├── bars_v2_04_extend_themes_table.sql     [扩展themes表]
├── bars_v2_05_create_bar_themes_table.sql [主题关联表]
├── bars_v2_06_create_bar_locations_table.sql [地址信息表]
├── bars_v2_07_seed_data.sql              [种子数据]
└── bars_v2_08_fix_view_rls.sql           [修复视图RLS权限]
```

### 2. 服务层 (Service Layer)
```
src/services/
├── barsService.ts     [bars业务逻辑核心]
└── reviewsService.ts  [评论功能，扩展支持bar reviews]
```

#### barsService.ts 核心功能：
- `listBars(district?, themes?)`: 获取bars列表，支持过滤
- `getBar(id)`: 获取单个bar详情
- `getBarDistricts()`: 获取地区列表
- `getBarThemesByCategory()`: 获取分类主题
- 数据转换: Supabase数据 → 前端Venue格式
- 评分聚合: 用户reviews平均值计算

#### reviewsService.ts 扩展功能：
- `listBarReviews(barId)`: 获取bar评论
- `createBarReview(input)`: 创建bar评论
- 评分映射: 新维度 ↔ 旧结构兼容性

### 3. UI组件层 (UI Layer)
```
src/routes/
├── Bars.tsx       [bars列表页]
└── BarDetail.tsx  [bar详情页]
```

#### Bars.tsx - bars列表页：
- 数据获取: barsService.listBars() + 过滤器数据
- 动态过滤: districts + 5个主题分类
- UI功能: 收藏、"Last Words Echohall"导航按钮
- 性能优化: onPointerDown, 错误处理

#### BarDetail.tsx - bar详情页：
- 数据获取: barsService.getBar() + reviewsService.listBarReviews()
- 评分计算: reviews平均值优先，fallback到默认
- 功能: 评论分页、添加评论导航
- 评分标签: Quality, Vibe, Price, Friendliness

### 4. 类型系统 (Type Layer)
```
src/contracts/types.ts
- Venue: 兼容bars和clubs的统一接口
- Review: 评论数据结构
- VenueRatings: 评分结构 (music, vibe, crowd, safety)
```

## 数据流交互图

### bars列表页面数据流：
```
Bars.tsx 
  → getBarDistricts() → districts表
  → getBarThemesByCategory() → themes表 (WHERE category IN (...))
  → barsService.listBars(district, themes)
    → bars表 + JOIN (districts, bar_ratings, bar_themes, themes)
    → bar_reviews表 (计算平均评分)
    → 数据转换 → Venue[]格式
  → UI渲染 + 过滤交互
```

### bar详情页面数据流：
```
BarDetail.tsx
  → barsService.getBar(id)
    → bars表 + JOIN (districts, bar_ratings, bar_themes, themes, bar_locations)
    → 返回单个Venue对象
  → reviewsService.listBarReviews(id)
    → bar_reviews表 (ORDER BY created_at DESC)
    → 返回Review[]数组
  → 计算平均评分 (reviews优先)
  → UI渲染 + 分页
```

### 评论创建流程：
```
SubmitReview.tsx (venueType: 'bar')
  → reviewsService.createBarReview(input)
    → 评分映射: (music→quality, crowd→price, vibe→vibe, safety→friendliness)
    → INSERT INTO bar_reviews
    → 返回新Review对象
  → 导航回BarDetail + optimistic update
```

## 评分映射策略

### 前端兼容性映射：
为了保持与现有UI组件的兼容性，采用了评分维度映射：

```
数据库新维度     →   前端显示字段   →   UI标签
quality_rating  →   ratings.music  →   "Quality"
price_rating    →   ratings.crowd  →   "Price" 
vibe_rating     →   ratings.vibe   →   "Vibe"
friendliness_rating → ratings.safety → "Friendliness"
```

### 评分计算逻辑：
1. 优先使用用户reviews的算术平均值
2. Fallback到bar_ratings表的默认评分
3. 所有评分都是0-100整数格式

## 安全架构

### Row Level Security (RLS):
- 所有表启用RLS
- 公共读取策略: 允许匿名用户查看数据
- 写入策略: 仅认证用户可创建reviews
- 视图安全: WITH (security_invoker = true) 继承基础表RLS

### 数据完整性:
- 外键约束确保引用完整性
- CHECK约束限制评分范围 (0-100)
- UNIQUE约束防止重复关联

## 性能优化

### 数据库层:
- 索引策略: district_id, payment字段, theme关联
- 查询优化: JOIN减少, 批量数据获取
- 视图缓存: themes_by_category预聚合

### 前端层:
- 分离数据加载: 初始化数据 + bars数据
- 触摸优化: onPointerDown减少300ms延迟
- 错误边界: 完整的错误处理和重试机制

## 扩展性设计

### 主题系统:
- 分类化设计支持新主题类型
- themes表category字段支持无限扩展
- 过滤器UI自动适配新分类

### 评分系统:
- 映射层设计支持评分维度修改
- 服务层抽象化，易于替换计算逻辑

### 多语言支持:
- 主题名称支持本地化
- UI标签通过映射层易于翻译

## 与CLUBS功能的一致性

### 共享组件:
- districts表: 地区信息
- themes表: 主题系统 (通过category区分)
- Review接口: 统一评论数据结构
- UI组件: Card, Badge, RatingBar等

### 架构对称性:
- 相同的服务层模式
- 相同的数据流设计  
- 相同的安全策略
- 相同的性能优化方案

这个架构确保了BARS功能与CLUBS功能的一致性，同时保持了各自的特色和扩展性。